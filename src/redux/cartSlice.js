import { createSlice } from '@reduxjs/toolkit';


// reducers: {} â€” this is where we define named functions (addToCart, removeFromCart, etc.).
// These reducer functions handle state changes when their corresponding action is dispatched.
// 
// state: refers to the current slice of state for this reducer (e.g., your cart).
// action: is the action object that was dispatched. It usually has:
// action.type: the type of action (like 'cart/addToCart')
// action.payload: the data sent with the action (like the product being added)


const cartSlice = createSlice({
  name: 'cart',
  initialState: [],
  reducers: {

    addToCart: (state, action) => {
      const item = state.find(item => item.id === action.payload.id);
      if (item) {
        item.quantity += 1;
      } else {
        state.push({ ...action.payload, quantity: 1 });
      }
    },

    removeFromCart: (state, action) => {
      return state.filter(item => item.id !== action.payload);
    },

    reduceQuantity: (state, action) => {


      return state.map(item =>
        item.id === action.payload
          ? { ...item, quantity: item.quantity > 1 ? item.quantity - 1 : 1 }
          : item
      );

    },
  },
});

//This line exports the action creators that were automatically generated by createSlice.
export const { addToCart, removeFromCart, reduceQuantity } = cartSlice.actions;
//Lets the store know how to update the state
export default cartSlice.reducer;